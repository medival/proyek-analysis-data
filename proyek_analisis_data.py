# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15sbsIrSOnKqaiGdI7mPLSM_dfYWqYs9r

# Proyek Analisis Data: Air Quality Dataset
- **Nama:** Adi Purnomo
- **Email:** dev.adipurnomo
- **ID Dicoding:** adi.purnomo

## Menentukan Pertanyaan Bisnis

1. Bagaimana tren suhu rata-rata harian berubah dari tahun ke tahun selama periode 2013–2017 di stasiun Aotizhongxin?

2. Bagaimana pengaruh arah dan kecepatan angin terhadap suhu ekstrem (tinggi dan rendah) di area Aotizhongxin?

3. Apakah ada pola musiman terhadap suhu maksimum dan minimum di stasiun Aotizhongxin selama tahun 2013–2017?

## Import Semua Packages/Library yang Digunakan
"""

!pip install streamlit

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

sns.set(style="whitegrid")

"""## Data Wrangling

### Gathering Data
"""

aotizhongxin_df = pd.read_csv('https://raw.githubusercontent.com/marceloreis/HTI/refs/heads/master/PRSA_Data_20130301-20170228/PRSA_Data_Aotizhongxin_20130301-20170228.csv')

aotizhongxin_df

"""**Insight:**
- Download dataset dari github
- Terdapat 35064 baris dan 18 kolom

### Assessing Data
"""

aotizhongxin_df.info()

"""**Insight:**
- Describe data info

### Cleaning Data
"""

aotizhongxin_df.isna().sum()

def clean_missing_values(df):
    # Pastikan kita bekerja dengan salinan yang aman
    df = df.copy()

    # Drop baris dengan missing value kecil (kurang dari 1%)
    df = df.dropna(subset=["TEMP", "PRES", "DEWP", "RAIN", "wd", "WSPM"])

    # Kolom polutan
    polutan_cols = ["PM2.5", "PM10", "SO2", "NO2", "CO", "O3"]
    for col in polutan_cols:
        median_values = df.groupby(['year', 'month'])[col].transform('median')
        df.loc[df[col].isna(), col] = median_values[df[col].isna()]

    # Drop baris jika masih ada missing di polutan
    df = df.dropna(subset=polutan_cols)

    return df

aotizhongxin_df_clean = clean_missing_values(aotizhongxin_df)

aotizhongxin_df_clean.isna().sum()

print("Jumlah duplikasi data: ", aotizhongxin_df_clean.duplicated().sum())

aotizhongxin_df_clean.describe().describe()

# Cek data setiap tahun
aotizhongxin_df_clean['year'].value_counts().sort_index()

# Hapus data tahun 2017 karena tidak lengkap
aotizhongxin_df_clean = aotizhongxin_df_clean[aotizhongxin_df_clean['year'] != 2017]

drop_col = ['No', 'station']

for i in aotizhongxin_df_clean.columns:
  if i in drop_col:
    aotizhongxin_df_clean.drop(labels=i, axis=1, inplace=True)

aotizhongxin_df_clean.head()

# rename colom agar lebih konsisten
def rename_columns(df):
    rename_dict = {
      'PM2.5': 'pm25',
      'PM10': 'pm10',
      'SO2': 'so2',
      'NO2': 'no2',
      'CO': 'co',
      'O3': 'o3',
      'TEMP': 'temp',
      'PRES': 'pres',
      'DEWP': 'dewp',
      'RAIN': 'rain',
      'WSPM': 'wspm',
      'WSPM': 'wind_speed',
      'wd': 'wind_direction',
    }
    return df.rename(columns=rename_dict)

aotizhongxin_df_clean = rename_columns(aotizhongxin_df_clean)
aotizhongxin_df_clean.head()

def convert_wind_direction(df):
    # Dictionary untuk mapping arah angin
    wind_dir_mapping = {
        "N": "Utara",
        "NNE": "Utara-Timur Laut",
        "NE": "Timur Laut",
        "ENE": "Timur-Timur Laut",
        "E": "Timur",
        "ESE": "Timur-Selatan Timur",
        "SE": "Selatan Timur",
        "SSE": "Selatan-Selatan Timur",
        "S": "Selatan",
        "SSW": "Selatan-Selatan Barat",
        "SW": "Selatan Barat",
        "WSW": "Barat-Selatan Barat",
        "W": "Barat",
        "WNW": "Barat-Utara Barat",
        "NW": "Barat Laut",
        "NNW": "Utara-Barat Laut"
    }


    # Menerapkan mapping ke kolom wind_dir
    df['wind_direction'] = df['wind_direction'].map(wind_dir_mapping)
    return df

aotizhongxin_df_clean = convert_wind_direction(aotizhongxin_df_clean)
aotizhongxin_df_clean

"""**Insight:**
- xxx
- xxx

## Exploratory Data Analysis (EDA)

### Statistik Dataset
"""

# Statistik deskriptif dari dataset
eda_stats = aotizhongxin_df_clean.describe()
print(eda_stats)

"""Suhu rata-rata adalah 13.6°C, dengan suhu minimum -16.8°C dan maksimum 40.5°C. Polusi udara cukup tinggi, dengan rata-rata PM2.5 sebesar 81.75 µg/m³ dan PM10 sebesar 109.45 µg/m³, menunjukkan kualitas udara yang sering kali buruk. Konsentrasi CO mencapai maksimum 10.000 µg/m³, menunjukkan potensi paparan gas berbahaya di beberapa waktu.

### Statistik Temperature per bulan dari tahun 2013-2016
"""

# Rata rata temperature per bulan
avg_temp_by_year_month = aotizhongxin_df_clean.groupby(['year', 'month'])['temp'].mean().reset_index()
print(avg_temp_by_year_month)

"""Suhu tertinggi terjadi pada bulan Juli–Agustus (~27–28°C), sedangkan suhu terendah pada Januari–Februari, sering berada di bawah 0°C. Setiap tahun mengikuti siklus iklim tahunan yang konsisten, dengan kenaikan suhu dari Maret hingga Agustus, lalu penurunan kembali menjelang akhir tahun.

### Explore Statistik Rata Rata Arah Mata Angin per Tahun dari (2013-2016)
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Mengelompokkan data berdasarkan tahun, bulan, dan arah angin
wind_direction_by_year_month = aotizhongxin_df_clean.groupby(['year', 'month', 'wind_direction']).size().reset_index(name='count')

# Filter data hanya untuk tahun 2013
wind_direction_2013 = wind_direction_by_year_month[wind_direction_by_year_month['year'] == 2013]

# Membuat pivot table untuk menghitung rata-rata frekuensi arah angin per bulan di tahun 2013
pivot_table_2013 = wind_direction_2013.pivot_table(index='month',
                                                   columns='wind_direction',
                                                   values='count',
                                                   aggfunc='mean',
                                                   fill_value=0)

# Membuat grafik untuk tahun 2013
plt.figure(figsize=(12, 6))

# Menentukan warna untuk visualisasi
sns.set_palette("Set2")

# Membuat grafik garis untuk tiap arah angin
for wind_dir in pivot_table_2013.columns:
    sns.lineplot(x=pivot_table_2013.index, y=pivot_table_2013[wind_dir], marker='o', label=wind_dir)

# Menambahkan label dan judul
plt.title('Rata-rata Arah Angin per Bulan (Tahun 2013)', fontsize=16)
plt.xlabel('Bulan', fontsize=12)
plt.ylabel('Rata-rata Jumlah Arah Angin', fontsize=12)
plt.legend(title='Arah Angin', bbox_to_anchor=(1.05, 1), loc='upper left')

# Menampilkan grafik
plt.tight_layout()
plt.show()

"""Berdasarkan statistik rata rata arah mata angin per bulan tahun 2013, rata rata arah mata angin terbanyak (wind direction) ke arah Barat-Selatan, sedangkan yang terendah ke arah Timur-Selatan Timur."""

import matplotlib.pyplot as plt
import seaborn as sns

# Mengelompokkan data berdasarkan tahun, bulan, dan arah angin
wind_direction_by_year_month = aotizhongxin_df_clean.groupby(['year', 'month', 'wind_direction']).size().reset_index(name='count')

# Filter data hanya untuk tahun 2014
wind_direction_2014 = wind_direction_by_year_month[wind_direction_by_year_month['year'] == 2014]

# Membuat pivot table untuk menghitung rata-rata frekuensi arah angin per bulan di tahun 2014
pivot_table_2014 = wind_direction_2014.pivot_table(index='month',
                                                   columns='wind_direction',
                                                   values='count',
                                                   aggfunc='mean',
                                                   fill_value=0)

# Membuat grafik untuk tahun 2014
plt.figure(figsize=(12, 6))

# Menentukan warna untuk visualisasi
sns.set_palette("Set2")

# Membuat grafik garis untuk tiap arah angin
for wind_dir in pivot_table_2014.columns:
    sns.lineplot(x=pivot_table_2014.index, y=pivot_table_2014[wind_dir], marker='o', label=wind_dir)

# Menambahkan label dan judul
plt.title('Rata-rata Arah Angin per Bulan (Tahun 2014)', fontsize=16)
plt.xlabel('Bulan', fontsize=12)
plt.ylabel('Rata-rata Jumlah Arah Angin', fontsize=12)
plt.legend(title='Arah Angin', bbox_to_anchor=(1.05, 1), loc='upper left')

# Menampilkan grafik
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Mengelompokkan data berdasarkan tahun, bulan, dan arah angin
wind_direction_by_year_month = aotizhongxin_df_clean.groupby(['year', 'month', 'wind_direction']).size().reset_index(name='count')

# Filter data hanya untuk tahun 2015
wind_direction_2015 = wind_direction_by_year_month[wind_direction_by_year_month['year'] == 2015]

# Membuat pivot table untuk menghitung rata-rata frekuensi arah angin per bulan di tahun 2015
pivot_table_2015 = wind_direction_2015.pivot_table(index='month',
                                                   columns='wind_direction',
                                                   values='count',
                                                   aggfunc='mean',
                                                   fill_value=0)

# Membuat grafik untuk tahun 2015
plt.figure(figsize=(12, 6))

# Menentukan warna untuk visualisasi
sns.set_palette("Set2")

# Membuat grafik garis untuk tiap arah angin
for wind_dir in pivot_table_2015.columns:
    sns.lineplot(x=pivot_table_2015.index, y=pivot_table_2015[wind_dir], marker='o', label=wind_dir)

# Menambahkan label dan judul
plt.title('Rata-rata Arah Angin per Bulan (Tahun 2015)', fontsize=16)
plt.xlabel('Bulan', fontsize=12)
plt.ylabel('Rata-rata Jumlah Arah Angin', fontsize=12)
plt.legend(title='Arah Angin', bbox_to_anchor=(1.05, 1), loc='upper left')

# Menampilkan grafik
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Mengelompokkan data berdasarkan tahun, bulan, dan arah angin
wind_direction_by_year_month = aotizhongxin_df_clean.groupby(['year', 'month', 'wind_direction']).size().reset_index(name='count')

# Filter data hanya untuk tahun 2016
wind_direction_2016 = wind_direction_by_year_month[wind_direction_by_year_month['year'] == 2016]

# Membuat pivot table untuk menghitung rata-rata frekuensi arah angin per bulan di tahun 2016
pivot_table_2016 = wind_direction_2016.pivot_table(index='month',
                                                   columns='wind_direction',
                                                   values='count',
                                                   aggfunc='mean',
                                                   fill_value=0)

# Membuat grafik untuk tahun 2016
plt.figure(figsize=(12, 6))

# Menentukan warna untuk visualisasi
sns.set_palette("Set2")

# Membuat grafik garis untuk tiap arah angin
for wind_dir in pivot_table_2016.columns:
    sns.lineplot(x=pivot_table_2016.index, y=pivot_table_2016[wind_dir], marker='o', label=wind_dir)

# Menambahkan label dan judul
plt.title('Rata-rata Arah Angin per Bulan (Tahun 2016)', fontsize=16)
plt.xlabel('Bulan', fontsize=12)
plt.ylabel('Rata-rata Jumlah Arah Angin', fontsize=12)
plt.legend(title='Arah Angin', bbox_to_anchor=(1.05, 1), loc='upper left')

# Menampilkan grafik
plt.tight_layout()
plt.show()

"""### Korelasi Matrix Antar Fitur"""

import seaborn as sns
import matplotlib.pyplot as plt

# Pilih hanya kolom numerik untuk analisis numerik
numerical_cols = aotizhongxin_df_clean.select_dtypes(include=['float64', 'int64']).columns

# Korelasi antar fitur numerik
correlation_matrix = aotizhongxin_df_clean[numerical_cols].corr()

# Visualisasi matriks korelasi
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Matriks Korelasi Antar Fitur")
plt.show()

"""### Statistik Polutan"""

# Visualisasi distribusi polutan PM2.5, PM10, SO2, NO2, CO, O3
plt.figure(figsize=(14, 8))

# Subplot untuk setiap polutan
pollutants = ['pm25', 'pm10', 'so2', 'no2', 'co', 'o3']
for i, pollutant in enumerate(pollutants, 1):
    plt.subplot(2, 3, i)
    sns.histplot(aotizhongxin_df_clean[pollutant], kde=True)
    plt.title(f"Distribusi {pollutant}")

plt.tight_layout()
plt.show()

"""### Statistik Polusi Per Bulan"""

# Visualisasi polusi berdasarkan bulan
plt.figure(figsize=(10, 6))
sns.boxplot(x='month', y='pm25', data=aotizhongxin_df_clean)
plt.title('Distribusi pm25 per Bulan')
plt.xlabel('Bulan')
plt.ylabel('pm25')
plt.show()

# Visualisasi polusi berdasarkan tahun
plt.figure(figsize=(10, 6))
sns.lineplot(x='year', y='pm25', data=aotizhongxin_df_clean)
plt.title('Tren pm25 dari Tahun ke Tahun')
plt.xlabel('Tahun')
plt.ylabel('pm25')
plt.show()

"""### Statistik Distribusi Arah Angin"""

# Visualisasi arah angin
plt.figure(figsize=(10, 6))
sns.countplot(y='wind_direction', data=aotizhongxin_df_clean, order=aotizhongxin_df_clean['wind_direction'].value_counts().index)
plt.title('Distribusi Arah Angin')
plt.xlabel('Jumlah')
plt.ylabel('Arah Angin')
plt.show()

"""### Statistik Kecepatan Angin"""

# Visualisasi kecepatan angin
plt.figure(figsize=(10, 6))
sns.histplot(aotizhongxin_df_clean['wind_speed'], kde=True)
plt.title('Distribusi Kecepatan Angin')
plt.xlabel('Kecepatan Angin (m/s)')
plt.ylabel('Frekuensi')
plt.show()

"""### Statistik Outlier Pada Polutan"""

# Boxplot untuk memeriksa outlier pada polutan
plt.figure(figsize=(12, 8))
sns.boxplot(data=aotizhongxin_df_clean[pollutants])
plt.title('Outlier pada Polutan')
plt.show()

"""**Insight:**
- xxx
- xxx

## Visualization & Explanatory Analysis

### Pertanyaan 1:

Bagaimana tren suhu rata-rata harian berubah dari tahun ke tahun selama periode 2013–2016 di stasiun Aotizhongxin?
"""

# Menghitung rata-rata suhu harian per tahun
aotizhongxin_df_clean['date'] = pd.to_datetime(aotizhongxin_df_clean[['year', 'month', 'day']])
aotizhongxin_df_clean['day_avg_temp'] = aotizhongxin_df_clean.groupby('date')['temp'].transform('mean')

# Mengambil rata-rata suhu per tahun
avg_temp_per_year = aotizhongxin_df_clean.groupby(aotizhongxin_df_clean['year'])['day_avg_temp'].mean()

# Visualisasi tren suhu rata-rata harian per tahun
plt.figure(figsize=(10, 6))
sns.lineplot(x=avg_temp_per_year.index, y=avg_temp_per_year.values, marker='o')
plt.title('Tren Suhu Rata-rata Harian dari Tahun ke Tahun (2013–2016)')
plt.xlabel('Tahun')
plt.ylabel('Suhu Rata-rata (°C)')
plt.grid(True)
plt.show()

"""Kesimpulan

Grafik menunjukkan tren suhu rata-rata harian dari tahun 2013 hingga 2016. Suhu tertinggi tercatat pada tahun 2013 (15,5°C), lalu turun hingga mencapai titik terendah pada 2015 (13,5°C). Pada tahun 2016, suhu mengalami kenaikan ringan (13,9°C). Grafik ini memperlihatkan pola penurunan suhu yang kemudian sedikit membaik.

### Pertanyaan 2:

Bagaimana pengaruh arah dan kecepatan angin terhadap suhu ekstrem (tinggi dan rendah) di area Aotizhongxin?
"""

# Visualisasi pengaruh arah angin terhadap suhu maksimum
plt.figure(figsize=(12, 6))
sns.boxplot(x='wind_direction', y='temp', data=aotizhongxin_df_clean)
plt.title('Pengaruh Arah Angin terhadap Suhu Ekstrem')
plt.xlabel('Arah Angin')
plt.ylabel('Suhu (°C)')
plt.xticks(rotation=45)
plt.show()

"""Berdasarkan boxplot pada gambar, dapat disimpulkan bahwa arah angin memiliki pengaruh yang cukup signifikan terhadap suhu ekstrem di area Aotizhongxin:

1. Arah angin dari selatan (seperti Selatan-Barat, Selatan-Timur, Selatan-Selatan Barat) cenderung menghasilkan suhu ekstrem yang lebih tinggi, baik pada suhu maksimum maupun median.

2. Arah angin dari utara dan barat laut (misalnya Utara, Barat Laut, dan Utara-Barat Laut) cenderung menghasilkan suhu yang lebih rendah, termasuk suhu minimum yang ekstrem.

3. Terdapat variasi besar dalam sebaran suhu untuk hampir semua arah angin, tetapi arah angin selatan lebih konsisten terkait suhu tinggi.

Dengan demikian, angin dari arah selatan berkorelasi dengan suhu lebih panas, sedangkan angin dari arah utara dan barat laut lebih berkorelasi dengan suhu dingin ekstrem.
"""

# Visualisasi pengaruh kecepatan angin terhadap suhu maksimum
plt.figure(figsize=(10, 6))
sns.scatterplot(x='wind_speed', y='temp', data=aotizhongxin_df_clean)
plt.title('Pengaruh Kecepatan Angin terhadap Suhu Ekstrem')
plt.xlabel('Kecepatan Angin (m/s)')
plt.ylabel('Suhu (°C)')
plt.grid(True)
plt.show()

"""Berdasarkan scatter plot pada gambar tersebut, terlihat bahwa:

1. Suhu ekstrem tinggi (di atas 30°C) lebih sering terjadi pada kecepatan angin rendah, umumnya di bawah 3 m/s.

2. Kecepatan angin yang lebih tinggi (di atas 5 m/s) cenderung mengurangi kemungkinan terjadinya suhu ekstrem tinggi, dan lebih banyak berkaitan dengan suhu sedang hingga rendah.

3. Titik-titik suhu sangat rendah juga tersebar pada berbagai kecepatan angin, tetapi tetap dominan pada kecepatan rendah hingga sedang.

Dengan demikian, kecepatan angin yang rendah berkorelasi dengan suhu ekstrem panas, sementara kecepatan tinggi cenderung menurunkan suhu ekstrem di area Aotizhongxin.

### Pertanyaan 3:

Apakah ada pola musiman terhadap suhu maksimum dan minimum di stasiun Aotizhongxin selama tahun 2013–2016?
"""

# Mengonversi angka bulan ke nama bulan
aotizhongxin_df_clean['month_name'] = aotizhongxin_df_clean['month'].map({
    1: "Jan", 2: "Feb", 3: "Mar", 4: "Apr", 5: "May", 6: "Jun",
    7: "Jul", 8: "Aug", 9: "Sep", 10: "Oct", 11: "Nov", 12: "Dec"
})

# Visualisasi pola musiman suhu maksimum per bulan
plt.figure(figsize=(10, 6))
sns.boxplot(x='month_name', y='temp', data=aotizhongxin_df_clean)
plt.title('Pola Musiman terhadap Suhu Maksimum per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Suhu Maksimum (°C)')
plt.show()

"""Kesimpulan

Berdasarkan grafik boxplot suhu maksimum per bulan di stasiun Aotizhongxin selama tahun 2013–2016, terlihat adanya pola musiman yang jelas:

1. Suhu maksimum tertinggi terjadi pada bulan Juli dan Agustus, dengan median sekitar 30°C — ini menunjukkan puncak musim panas.

2. Suhu maksimum terendah terjadi pada bulan Desember hingga Februari, dengan banyak nilai di bawah 0°C — mencerminkan musim dingin yang ekstrem.

3. Transisi suhu terlihat bertahap: meningkat dari Maret ke Juli, dan menurun kembali dari September ke Desember.

Kesimpulan: Terdapat pola musiman yang konsisten, dengan suhu maksimum tertinggi di musim panas (Juli–Agustus) dan terendah di musim dingin (Desember–Februari).
"""

# 1. Tambahkan kolom month_name di df utama (berisi nama bulan 3 huruf)
month_map = {
    1: "Jan", 2: "Feb", 3: "Mar", 4: "Apr", 5: "May", 6: "Jun",
    7: "Jul", 8: "Aug", 9: "Sep", 10: "Oct", 11: "Nov", 12: "Dec"
}
aotizhongxin_df_clean['month_name'] = aotizhongxin_df_clean['month'].map(month_map)

# 2. Hitung suhu minimum per bulan
min_temp_per_month = aotizhongxin_df_clean.groupby('month')['temp'].min().reset_index()
min_temp_per_month['month_name'] = min_temp_per_month['month'].map(month_map)
min_temp_per_month = min_temp_per_month.rename(columns={'temp': 'min_temp'})

# 3. Gabungkan hasilnya ke dataframe utama
aotizhongxin_df_clean = pd.merge(aotizhongxin_df_clean, min_temp_per_month[['month_name', 'min_temp']], on='month_name', how='left')

# 4. Visualisasi
plt.figure(figsize=(10, 6))
sns.boxplot(x='month_name', y='min_temp', data=aotizhongxin_df_clean,
            order=["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"])
plt.title('Pola Musiman terhadap Suhu Minimum per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Suhu Minimum (°C)')
plt.show()

"""Kesimpulan
Terdapat pola musiman yang jelas terhadap suhu minimum:

1. Suhu minimum sangat rendah di bulan-bulan musim dingin (Desember, Januari, Februari)
   - Suhu minimum mencapai sekitar -17°C pada Januari.
   - Februari dan Desember juga menunjukkan suhu di bawah -10°C.

2. Suhu minimum meningkat secara bertahap memasuki musim semi dan puncaknya terjadi di musim panas (Juni, Juli, Agustus)
   - Pada bulan Juli, suhu minimum mencapai puncaknya sekitar 17°C.
   - Ini menunjukkan musim panas yang hangat dengan malam yang tidak terlalu dingin.

3. Setelah Agustus, suhu kembali menurun secara bertahap menuju musim gugur dan dingin lagi di bulan November dan Desember.
"""